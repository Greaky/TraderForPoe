<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tb="http://www.hardcodet.net/taskbar"
                    xmlns:vm="clr-namespace:TraderForPoe.ViewModel">

    <!--
         The "shared" directive is needed if we reopen the sample window a few times - WPF will otherwise
         reuse the same context menu (which is a resource) again (which will have its DataContext set to the old TaskbarIcon)
    -->
    <ContextMenu x:Shared="false" x:Key="SysTrayMenu">
        <MenuItem Header="Clip Monitor" IsCheckable="True" IsChecked="{Binding UseClipboardMonitor}" />
        <Separator />
        <MenuItem Header="History" Command="{Binding CmdHistory}" />
        <MenuItem Header="Log file" Command="{Binding CmdLog}" />
        <MenuItem Header="Settings" Command="{Binding CmdSettings}" />
        <Separator />
        <MenuItem Header="Restart" Command="{Binding CmdRestart}" />
        <MenuItem Header="Update" Command="{Binding CmdUpdate}" />
        <MenuItem Header="About" Command="{Binding CmdAbout}" />
        <MenuItem Header="Quit" Command="{Binding CmdQuit}" />
    </ContextMenu>

    <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
    <tb:TaskbarIcon Name="notifyIcon"
                    x:Key="NotifyIcon"
                    IconSource="/Resources/application.ico"
                    MenuActivation="LeftOrRightClick"
                    DoubleClickCommand="{Binding CmdSettings}"
                    ContextMenu="{StaticResource SysTrayMenu}">

        <!-- self-assign a data context (could also be done programmatically) -->
        <tb:TaskbarIcon.DataContext>
            <vm:NotifyIconViewModel />
        </tb:TaskbarIcon.DataContext>
    </tb:TaskbarIcon>

    <PopupAnimation x:Key="{x:Static SystemParameters.MenuPopupAnimationKey}">None</PopupAnimation>

</ResourceDictionary>